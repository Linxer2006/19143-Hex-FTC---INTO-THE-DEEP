package org.firstinspires.ftc.teamcode.drive.opmode;

import com.acmerobotics.dashboard.FtcDashboard;
import com.acmerobotics.dashboard.config.Config;
import com.acmerobotics.dashboard.telemetry.MultipleTelemetry;
import com.acmerobotics.roadrunner.geometry.Pose2d;
import com.acmerobotics.roadrunner.trajectory.Trajectory;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;

import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.TouchSensor;

import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.firstinspires.ftc.teamcode.drive.SampleMecanumDrive;

@Config
@Autonomous
public class AutonomBaraSus extends LinearOpMode {

    private DcMotorEx extendo;
    private DcMotorEx balance;
    private DcMotor frontLeft;
    private DcMotor frontRight;
    private DcMotor backLeft;
    private DcMotor backRight;
    private TouchSensor limitSwitch;

    private Servo gheara;
    private Servo servoCap;

    private boolean esteDeschisa = false;

    public static int poz1 = -750;
    public static int poz2 = -1000;
    public static int poz3 = -2020;
    public static int poz0 = -5;

    public static int ridica1 = -70;
    public static int ridica2 = -260;
    public static int ridica3 = -1010;
    public static int casa = 0;
    public static int ridica4 = -1150;

    public static double putereMotor = 0.7;

    @Override
    public void runOpMode() throws InterruptedException {


        servoCap = hardwareMap.get(Servo.class, "servoCap");

        gheara = hardwareMap.get(Servo.class, "servoGheara");
        extendo = hardwareMap.get(DcMotorEx.class, "extendo");
        extendo.setZeroPowerBehavior(DcMotorEx.ZeroPowerBehavior.BRAKE);

        balance = hardwareMap.get(DcMotorEx.class, "motorBalans");
        balance.setZeroPowerBehavior(DcMotorEx.ZeroPowerBehavior.BRAKE);

        frontLeft = hardwareMap.get(DcMotor.class, "stangaFata");
        frontRight = hardwareMap.get(DcMotor.class, "dreaptaFata");
        backLeft = hardwareMap.get(DcMotor.class, "stangaSpate");
        backRight = hardwareMap.get(DcMotor.class, "dreaptaSpgate");

        frontLeft.setDirection(DcMotor.Direction.REVERSE);
        backLeft.setDirection(DcMotor.Direction.REVERSE);

        balance.setMode(DcMotorEx.RunMode.STOP_AND_RESET_ENCODER);
        balance.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        extendo.setMode(DcMotorEx.RunMode.STOP_AND_RESET_ENCODER);
        extendo.setMode(DcMotor.RunMode.RUN_USING_ENCODER);



        gheara.setPosition(0.67);
        servoCap.scaleRange(0,0.2);

        servoCap.setPosition(0);

        gamepad1.setLedColor(255, 0, 0, 1200000000);
        gamepad2.setLedColor(0, 255, 255, 1200000000);

        double DISTANCE = -20.7;
        SampleMecanumDrive drive = new SampleMecanumDrive(hardwareMap);
        Telemetry telemetry = new MultipleTelemetry(this.telemetry, FtcDashboard.getInstance().getTelemetry());

        Trajectory trajectory = drive.trajectoryBuilder(new Pose2d())
                .forward(DISTANCE)

                .addTemporalMarker(0.1,()-> {
                 goToBrat(-1445);
                 goToExtindo(-1292);
                 servoCap.setPosition(0);
        })
                .build();


                Trajectory trajectory15 = drive.trajectoryBuilder(trajectory.end())
                        .back(6.5)
                   .addDisplacementMarker(()-> {

                            goToExtindo1(-140);
                          // if(extendo.getCurrentPosition()>=-140) gheara.setPosition(0);
                        })


                .build();


        Trajectory trajectory25 = drive.trajectoryBuilder(trajectory15.end())

                .forward(4.5)
                .addDisplacementMarker(() -> {
                    gheara.setPosition(0);
                })
                .addDisplacementMarker(() -> {
                    goToExtindo1(0);
                    goToBrat(0);
                })
                .build();


        Trajectory trajectory2 = drive.trajectoryBuilder(trajectory25.end())
                .strafeLeft(26)
                        .build();

        Trajectory trajectory3 = drive.trajectoryBuilder(trajectory2.end())
                .back(28)
                .build();

        Trajectory trajectory4 = drive.trajectoryBuilder(trajectory3.end())
                .strafeLeft(13)
                .build();

        Trajectory trajectory5 = drive.trajectoryBuilder(trajectory4.end())
                        .forward(47)
                                .build();

        Trajectory trajectory6 = drive.trajectoryBuilder(trajectory5.end())
                .back(47)
                .build();

        Trajectory trajectory7 = drive.trajectoryBuilder(trajectory6.end())
                .strafeLeft(10)
                .build();

        Trajectory trajectory8 = drive.trajectoryBuilder(trajectory7.end())
                .forward(47)
                .build();

        Trajectory trajectory9 = drive.trajectoryBuilder(trajectory8.end())
                .back(47)
                .build();

        Trajectory trajectory10 = drive.trajectoryBuilder(trajectory9.end())
                .strafeLeft(5.5)
                .build();

        Trajectory trajectory11 = drive.trajectoryBuilder(trajectory10.end())
                .forward(47)
                .addDisplacementMarker(() ->{
                    gheara.setPosition(0.67);
                })
                .build();



        waitForStart();

        if (isStopRequested()) return;

        double Pozbalance=balance.getCurrentPosition();

            drive.followTrajectory(trajectory);
            sleep(1000);
            drive.followTrajectory(trajectory15);
            sleep(200);
            drive.followTrajectory(trajectory25);

         drive.followTrajectory(trajectory2);
         drive.followTrajectory(trajectory3);
         drive.followTrajectory(trajectory4);

         drive.followTrajectory(trajectory5);
         drive.followTrajectory(trajectory6);
         drive.followTrajectory(trajectory7);

        drive.followTrajectory(trajectory8);
        drive.followTrajectory(trajectory9);
        drive.followTrajectory(trajectory10);

        drive.followTrajectory(trajectory11);


            Pose2d poseEstimate = drive.getPoseEstimate();
            telemetry.addData("Balans", Pozbalance);
            telemetry.addData("finalX", poseEstimate.getX());
            telemetry.addData("finalY", poseEstimate.getY());
            telemetry.addData("finalHeading", poseEstimate.getHeading());
            telemetry.update();



        while (!isStopRequested() && opModeIsActive()) ;

    }
    public void goToExtindo(int position) {
        extendo.setTargetPosition(position);
        extendo.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        extendo.setPower(-0.5);

    }
    public void goToExtindo1(int position) {
        extendo.setTargetPosition(position);
        extendo.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        extendo.setPower(-1.3);

    }

    public void goToBrat(int position) {
        balance.setTargetPosition(position);
        balance.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        balance.setPower(-0.5);
    }
}
//193
